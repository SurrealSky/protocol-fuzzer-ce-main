


// Authors:
//   Michael Eddington (mike@dejavusecurity.com)

// $Id$

using System;
using System.Xml;

namespace Peach.Core.Dom
{
	public class Dom : INamed, IPitSerializable
	{
		#region Obsolete Functions

		[Obsolete("This property is obsolete and has been replaced by the Name property.")]
		public string name { get { return Name; } }

		#endregion

		/// <summary>
		/// The namespace of this Dom.
		/// </summary>
		public string Name { get; set; }

		public string fileName { get; set; }
		public string version { get; set; }
		public string author { get; set; }
		public string description { get; set; }

		public RunContext context { get; set; }

		public OwnedCollection<Dom, DataModel> dataModels { get; private set; }
		public OwnedCollection<Dom, StateModel> stateModels { get; private set; }
		public OwnedCollection<Dom, Test> tests { get; private set; }
		public NamedCollection<Dom> ns { get; private set; }
		public NamedCollection<Agent> agents { get; private set; }
		public NamedCollection<DataSet> datas { get; private set; }

		Scripting _python;

		public Scripting Python
		{
			get { return _python ?? (_python = new PythonScripting()); }
		}

		public Dom()
		{
			Name = "";
			fileName = "";
			version = "";
			author = "";
			description = "";

			dataModels = new OwnedCollection<Dom, DataModel>(this);
			stateModels = new OwnedCollection<Dom, StateModel>(this);
			tests = new OwnedCollection<Dom, Test>(this);
			ns = new NamedCollection<Dom>();
			agents = new NamedCollection<Agent>();
			datas = new NamedCollection<DataSet>();
		}

		/// <summary>
		/// Execute all analyzers on all data models in DOM.
		/// </summary>
		public void evaulateDataModelAnalyzers()
		{
			foreach (var model in dataModels)
				model.evaulateAnalyzers();

			foreach (var test in tests)
			{
				foreach (var state in test.stateModel.states)
				{
					foreach (var action in state.actions)
					{
						foreach (var data in action.allData)
						{
							data.dataModel.evaulateAnalyzers();
						}
					}
				}
			}
		}

		public void WritePit(XmlWriter pit)
		{
			pit.WriteStartElement("Peach");

			if(!string.IsNullOrEmpty(author))
				pit.WriteAttributeString("author", author);
			if (!string.IsNullOrEmpty(description))
				pit.WriteAttributeString("description", description);
			if (!string.IsNullOrEmpty(version))
				pit.WriteAttributeString("version", version);

			var now = DateTime.Now;
			pit.WriteComment("Generated by Peach on " + now.ToShortDateString() + " " + now.ToShortTimeString());

			foreach (var obj in this.ns)
			{
				pit.WriteStartElement("Include");
				pit.WriteAttributeString("ns", obj.Name);
				pit.WriteAttributeString("src", obj.fileName);
				pit.WriteEndElement();
			}

			foreach (var obj in dataModels)
				obj.WritePit(pit);

			//foreach (var obj in this.datas)
			//	obj.WritePit(pit);

			foreach (var obj in this.stateModels)
				obj.WritePit(pit);

			//foreach (var obj in this.agents)
			//	obj.WritePit(obj);

			foreach (var obj in tests)
				obj.WritePit(pit);

			pit.WriteEndElement();
		}

		#region Reference Resolution

		/// <summary>
		/// Find a referenced Dom element by name, taking into account namespace prefixes.
		/// </summary>
		/// <typeparam name="T">Type of Dom element.</typeparam>
		/// <param name="refName">Name of reference</param>
		/// <param name="predicate">Selector predicate that returns the element collection</param>
		/// <returns>The named Dom element or null if not found.</returns>
		public T getRef<T>(string refName, Func<Dom, ITryGetValue<string, T>> predicate)
		{
			int i = refName.IndexOf(':');
			if (i > -1)
			{
				string prefix = refName.Substring(0, i);

				Dom other;
				if (!ns.TryGetValue(prefix, out other))
					throw new PeachException("Unable to locate namespace '" + prefix + "' in ref '" + refName + "'.");

				refName = refName.Substring(i + 1);

				return other.getRef<T>(refName, predicate);
			}

			var dict = predicate(this);
			T value;
			if (dict.TryGetValue(refName, out value))
				return value;
			return default(T);
		}

		/// <summary>
		/// Resolve a 'ref' attribute.  Will throw a PeachException if
		/// namespace is given, but not found.
		/// </summary>
		/// <param name="name">Ref name to resolve.</param>
		/// <param name="element">Container to start searching from.</param>
		/// <returns>DataElement for ref or null if not found.</returns>
		public DataElement getRef(string name, DataElementContainer element)
		{
			return getRef(this, name, element);
		}

		static DataElement getRef(Dom dom, string name, DataElementContainer container)
		{
			if (name.IndexOf(':') > -1)
			{
				string ns = name.Substring(0, name.IndexOf(':'));

				Dom other;
				if (!dom.ns.TryGetValue(ns, out other))
					throw new PeachException("Unable to locate namespace '" + ns + "' in ref '" + name + "'.");

				name = name.Substring(name.IndexOf(':') + 1);

				// If we have to look in a different namespace, ignore any container
				// that might have been passed to us
				return getRef(other, name, null);
			}

			if (container != null)
			{
				DataElement elem = container.find(name);
				if (elem != null)
					return elem;
			}

			foreach (DataModel model in dom.dataModels)
			{
				if (model.Name == name)
					return model;
			}

			foreach (DataModel model in dom.dataModels)
			{
				DataElement elem = model.find(name);
				if (elem != null)
					return elem;
			}

			return null;
		}

		#endregion
	}
}


// END
