using System;
using System.IO;
using System.Linq;
using NUnit.Framework;
using Peach.Core;
using Peach.Core.Analyzers;
using Peach.Core.IO;
using Peach.Core.Test;

namespace Peach.Pro.Test.Core.Fixups
{
	[TestFixture]
	[Quick]
	[Peach]
	class FromFileFixupTests : DataModelCollector
	{
		[Test]
		public void QuickTest()
		{
			// standard test

			var pem = @"Certificate:
    Data:
        Version: 1 (0x0)
        Serial Number: 2 (0x2)
    Signature Algorithm: md5WithRSAEncryption
        Issuer: C=AU, ST=Some-State, O=Internet Widgits Pty Ltd
        Validity
            Not Before: Aug 17 22:17:46 2015 GMT
            Not After : Aug 16 22:17:46 2016 GMT
        Subject: C=AU, ST=Some-State, O=Internet Widgits Pty Ltd, CN=dtls-client.pf.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (512 bit)
                Modulus:
                    00:eb:bb:b8:59:74:e9:e3:b6:60:21:e8:4e:41:b5:
                    94:17:de:33:eb:5a:e6:9e:7d:c4:8e:1f:47:7e:9a:
                    5e:bc:de:30:c3:a2:c7:63:45:7b:42:12:15:61:89:
                    31:09:2d:55:34:31:cb:75:69:41:9b:ce:98:65:39:
                    d2:3d:0b:af:4f
                Exponent: 65537 (0x10001)
    Signature Algorithm: md5WithRSAEncryption
         46:8b:81:16:d9:de:7d:fd:de:14:db:db:07:ef:62:ab:20:2e:
         58:d6:8e:37:18:c3:cd:bb:ac:0f:59:05:b4:91:d7:fc:4c:7a:
         99:51:49:8c:f1:c2:01:4c:62:b1:67:e4:59:11:4f:eb:0c:de:
         82:8c:72:88:b0:f2:df:39:ca:b9
-----BEGIN CERTIFICATE-----
MIIBkTCCATsCAQIwDQYJKoZIhvcNAQEEBQAwRTELMAkGA1UEBhMCQVUxEzARBgNV
BAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0
ZDAeFw0xNTA4MTcyMjE3NDZaFw0xNjA4MTYyMjE3NDZaMGIxCzAJBgNVBAYTAkFV
MRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRz
IFB0eSBMdGQxGzAZBgNVBAMMEmR0bHMtY2xpZW50LnBmLmNvbTBcMA0GCSqGSIb3
DQEBAQUAA0sAMEgCQQDru7hZdOnjtmAh6E5BtZQX3jPrWuaefcSOH0d+ml683jDD
osdjRXtCEhVhiTEJLVU0Mct1aUGbzphlOdI9C69PAgMBAAEwDQYJKoZIhvcNAQEE
BQADQQBGi4EW2d59/d4U29sH72KrIC5Y1o43GMPNu6wPWQW0kdf8THqZUUmM8cIB
TGKxZ+RZEU/rDN6CjHKIsPLfOcq5
-----END CERTIFICATE-----
";

			var pemBytes = new byte[] {
	0x30, 0x82, 0x01, 0x91, 0x30, 0x82, 0x01, 0x3B, 0x02, 0x01, 0x02, 0x30, 0x0D, 0x06, 0x09, 0x2A,
    0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x04, 0x05, 0x00, 0x30, 0x45, 0x31, 0x0B, 0x30, 0x09,
    0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x55, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
    0x04, 0x08, 0x0C, 0x0A, 0x53, 0x6F, 0x6D, 0x65, 0x2D, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21,
    0x30, 0x1F, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x18, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65,
    0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74, 0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4C, 0x74,
    0x64, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x35, 0x30, 0x38, 0x31, 0x37, 0x32, 0x32, 0x31, 0x37, 0x34,
    0x36, 0x5A, 0x17, 0x0D, 0x31, 0x36, 0x30, 0x38, 0x31, 0x36, 0x32, 0x32, 0x31, 0x37, 0x34, 0x36,
    0x5A, 0x30, 0x62, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x55,
    0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0C, 0x0A, 0x53, 0x6F, 0x6D, 0x65, 0x2D,
    0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x18,
    0x49, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74, 0x73,
    0x20, 0x50, 0x74, 0x79, 0x20, 0x4C, 0x74, 0x64, 0x31, 0x1B, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04,
    0x03, 0x0C, 0x12, 0x64, 0x74, 0x6C, 0x73, 0x2D, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2E, 0x70,
    0x66, 0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x5C, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7,
    0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x4B, 0x00, 0x30, 0x48, 0x02, 0x41, 0x00, 0xEB, 0xBB,
    0xB8, 0x59, 0x74, 0xE9, 0xE3, 0xB6, 0x60, 0x21, 0xE8, 0x4E, 0x41, 0xB5, 0x94, 0x17, 0xDE, 0x33,
    0xEB, 0x5A, 0xE6, 0x9E, 0x7D, 0xC4, 0x8E, 0x1F, 0x47, 0x7E, 0x9A, 0x5E, 0xBC, 0xDE, 0x30, 0xC3,
    0xA2, 0xC7, 0x63, 0x45, 0x7B, 0x42, 0x12, 0x15, 0x61, 0x89, 0x31, 0x09, 0x2D, 0x55, 0x34, 0x31,
    0xCB, 0x75, 0x69, 0x41, 0x9B, 0xCE, 0x98, 0x65, 0x39, 0xD2, 0x3D, 0x0B, 0xAF, 0x4F, 0x02, 0x03,
    0x01, 0x00, 0x01, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x04,
    0x05, 0x00, 0x03, 0x41, 0x00, 0x46, 0x8B, 0x81, 0x16, 0xD9, 0xDE, 0x7D, 0xFD, 0xDE, 0x14, 0xDB,
    0xDB, 0x07, 0xEF, 0x62, 0xAB, 0x20, 0x2E, 0x58, 0xD6, 0x8E, 0x37, 0x18, 0xC3, 0xCD, 0xBB, 0xAC,
    0x0F, 0x59, 0x05, 0xB4, 0x91, 0xD7, 0xFC, 0x4C, 0x7A, 0x99, 0x51, 0x49, 0x8C, 0xF1, 0xC2, 0x01,
    0x4C, 0x62, 0xB1, 0x67, 0xE4, 0x59, 0x11, 0x4F, 0xEB, 0x0C, 0xDE, 0x82, 0x8C, 0x72, 0x88, 0xB0,
    0xF2, 0xDF, 0x39, 0xCA, 0xB9 
};

			var xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n" +
				"<Peach>" +
				"   <DataModel name=\"TheDataModel\">" +
				"       <Blob name=\"Checksum\">" +
				"           <Fixup class=\"FromFile\">" +
				"               <Param name=\"Filename\" value=\"{0}\"/>" +
				"               <Param name=\"Encoding\" value=\"Pem\"/>" +
				"           </Fixup>" +
				"       </Blob>" +
				"       <Blob name=\"Data\" value=\"12345\"/>" +
				"   </DataModel>" +

				"   <StateModel name=\"TheState\" initialState=\"Initial\">" +
				"       <State name=\"Initial\">" +
				"           <Action type=\"output\">" +
				"               <DataModel ref=\"TheDataModel\"/>" +
				"           </Action>" +
				"       </State>" +
				"   </StateModel>" +

				"   <Test name=\"Default\">" +
				"       <StateModel ref=\"TheState\"/>" +
				"       <Publisher class=\"Null\"/>" +
				"   </Test>" +
				"</Peach>";

			var tempFile = Path.GetTempFileName();

			try
			{
				File.WriteAllText(tempFile, pem);

				xml = string.Format(xml, tempFile);

				var parser = new PitParser();
				var dom = parser.asParser(null, new MemoryStream(ASCIIEncoding.ASCII.GetBytes(xml)));

				var blob = dom.dataModels[0][0];

				var data = (BitwiseStream)blob.InternalValue;
				Assert.AreEqual(405, data.Length);

				data.Position = 0;
				var reader = new BitReader(data);
				var bytes = reader.ReadBytes((int)data.Length);

				Assert.AreEqual(pemBytes.ToArray(), bytes.ToArray());

				//var config = new RunConfiguration();
				//config.singleIteration = true;

				//var e = new Engine(this);
				//e.startFuzzing(dom, config);

				//Assert.AreEqual(1, values.Count);
				//Assert.AreEqual(pemBytes.ToArray(), values[0].ToArray());
			}
			finally
			{
				File.Delete(tempFile);
			}

		}

		[Test]
		public void VerifyNoExceptionOnLoad()
		{
			// Verify fixup does not exception when
			// file is missing during parsing.

			var xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n" +
				"<Peach>" +
				"   <DataModel name=\"TheDataModel\">" +
				"       <Blob name=\"Checksum\">" +
				"           <Fixup class=\"FromFile\">" +
				"               <Param name=\"Filename\" value=\"{0}\"/>" +
				"               <Param name=\"Encoding\" value=\"Pem\"/>" +
				"           </Fixup>" +
				"       </Blob>" +
				"       <Blob name=\"Data\" value=\"12345\"/>" +
				"   </DataModel>" +

				"   <StateModel name=\"TheState\" initialState=\"Initial\">" +
				"       <State name=\"Initial\">" +
				"           <Action type=\"output\">" +
				"               <DataModel ref=\"TheDataModel\"/>" +
				"           </Action>" +
				"       </State>" +
				"   </StateModel>" +

				"   <Test name=\"Default\">" +
				"       <StateModel ref=\"TheState\"/>" +
				"       <Publisher class=\"Null\"/>" +
				"   </Test>" +
				"</Peach>";

			var tempFile = Path.GetTempFileName();
			File.Delete(tempFile);

			xml = string.Format(xml, tempFile);
			var parser = new PitParser();
			parser.asParser(null, new MemoryStream(ASCIIEncoding.ASCII.GetBytes(xml)));
		}
	}
}

// end
