


// Authors:
//   Michael Eddington (mike@dejavusecurity.com)
//   Ross Salpino (rsal42@gmail.com)

// $Id$

using System;
using System.Collections.Generic;
using System.ComponentModel;
using Peach.Core;
using Peach.Core.Dom;
using Random = Peach.Core.Random;

namespace Peach.Pro.Core.Fixups
{
	[Description("Standard sequential random fixup.")]
	[Fixup("SequenceRandom", true)]
	[Fixup("SequenceRandomFixup")]
	[Fixup("sequence.SequenceRandomFixup")]
	[Parameter("MinValue", typeof(long), "Minimum value allowed to be generated by the fixup.", "0")]
	[Parameter("MaxValue", typeof(ulong?), "Maximum value allowed to be generated by the fixup.", "")]
	[Serializable]
	public class SequenceRandomFixup : Peach.Core.Fixups.VolatileFixup
	{
		public long MinValue { get; protected set; }
		public ulong? MaxValue { get; protected set; }

		public SequenceRandomFixup(DataElement parent, Dictionary<string, Variant> args)
			: base(parent, args)
		{
			ParameterParser.Parse(this, args);

			if (parent is Peach.Core.Dom.String)
				parent.DefaultValue = new Variant(0);

			if (MaxValue.HasValue && MaxValue.Value < long.MaxValue && (long)MaxValue.Value < MinValue)
				throw new ArgumentOutOfRangeException("MaxValue", "MaxValue must be greater than MinValue");
		}

		protected override Variant OnActionRun(RunContext ctx)
		{
			Peach.Core.Dom.Number num = parent as Peach.Core.Dom.Number;
			if (num == null && !(parent is Peach.Core.Dom.String && parent.Hints.ContainsKey("NumericalString")))
				throw new PeachException("SequenceRandomFixup has non numeric parent '" + parent.fullName + "'.");

			object obj;

			Random rng;

			if (!ctx.iterationStateStore.TryGetValue("SequenceRandomFixup", out obj))
			{
				rng = new Random(ctx.config.randomSeed + ctx.currentIteration);
				ctx.iterationStateStore.Add("SequenceRandomFixup", rng);
			}
			else
			{
				rng = obj as Random;
			}

			long min;
			ulong max;

			if (num != null)
			{
				min = Math.Max(num.MinValue, MinValue);
				if (MaxValue.HasValue)
					max = Math.Min(num.MaxValue, MaxValue.Value);
				else
					max = num.MaxValue;
			}
			else
			{
				min = MinValue;
				max = MaxValue.HasValue ? MaxValue.Value : int.MaxValue;
			}

			if (max < long.MaxValue)
				return new Variant(rng.Next(min, (long)(max + 1)));

			if (max > long.MaxValue)
				return new Variant(rng.Next((ulong)min, max));

			return new Variant(rng.Next(min, (long)max));
		}
	}
}
