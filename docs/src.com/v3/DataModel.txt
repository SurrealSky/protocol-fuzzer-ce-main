:toc!:
== DataModel

The DataModel element is a child of the Peach root element.  A DataModel defines the 
structure of a data block by specifying additional child elements such as 
link:Number.html[Number], link:Blob.html[Blob], or link:String.html[String].

=== Attributes:

 * link:name.html[name] -- [Required] Friendly name of the DataModel this is useful when 
 referencing the model or debugging. 
 * link:ref.html[ref] -- Reference to a DataModel to use as a template (optional)
 * link:mutable.html[mutable]-- Is data element changeable (should it be mutated) (optional, defaults to true) 
 * link:constraint.html[constraint] -- Specifies an expression that helps Peach identify if the data element has been properly consumed (optional)

=== Valid Child-Elements:

 * link:Blob.html[Blob]
 * link:Block.html[Block]
 * link:Choice.html[Choice]
 * link:Custom.html[Custom]
 * link:Flag.html[Flag]
 * link:Flags.html[Flags]
 * link:Number.html[Number]
 * link:Padding.html[Padding]
 * link:String.html[String]
 * link:XmlAttribute.html[XmlAttribute]
 * link:XmlElement.html[XmlElement]

 * link:Relation.html[Relation]
 * link:Fixup.html[Fixup]
 * link:Transformer.html[Transformer]
 
 * link:Placement.html[Placement]

=== Examples: ===

Any number of DataModels can be specified in a Peach Pit file. However, each must each have a unique name. Break complex formats into smaller models by split them into logical parts. This makes DataModels easier to read, debug, and re-use. 

A DataModel named "HelloWorld" contains a single string and outputs "Hello world!" 

[source,xml]
----
<DataModel name="HelloWorld">
  <String value="Hello world!" />
</DataModel>
----

DataModels can reference other DataModels and inherit their child elements with the ref attribute. 

[source,xml]
----
<DataModel name="ParentModel">
  <String value="Hello " />
</DataModel>

<DataModel name="HelloWorldModel" ref="ParentModel" >
  <String value=" world!" />
</DataModel>
----

=== References (ref attribute)

When a reference (ref attribute) is supplied, the contents of the referenced DataModel are copied to create the base of the new DataModel.  Any child elements in the new DataModel will override elements from that base with the same name. In this example the child model Customized contains a String named Key. It's value will overwrite the parent's String "Key" which has no value. 

[source,xml]
----
<DataModel name="Template">
  <String name="Key" />
  <String value=": " token="true" />
  <String name="Value" />
  <String value="\r\n" token="true" />
</DataModel>

<DataModel name="Customized" ref="Template">
  <String name="Key" value="Content-Length" />
  <String name="Value">
    <Relation type="size" of="HttpBody" />
  </String>
  <Blob name="HttpBody" />
</DataModel>
----

----
The output of "Template"   is " : \r\n"
The output of "Customized" is "Content-Length: 100\r\n"
----

When parsed into a DataModel, Customized will look like the combination of both data models.

[source,xml]
----
<DataModel name="Customized" ref="Template">
  <String name="Key" value="Content-Length" />
  <String value=": " token="true" />
  <String name="Value">
    <Relation type="size" of="HttpBody" />
  </String>
  <String value="\r\n" token="true" />
</DataModel>
----