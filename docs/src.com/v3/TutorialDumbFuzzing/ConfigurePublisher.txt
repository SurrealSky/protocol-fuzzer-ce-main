:toc!:
link:CreateStateModel.html[<< Previouse] | link:../TutorialDumbFuzzing.html[Up] | link:AgentAndMonitor.html[Next >>]

''''

== Configure Publisher ==

The last thing we need todo before we can try out our nifty fuzzer is to configure a link:../Publisher.html[Publisher].
link:../Publisher.html[Publishers] are I/O connectors that implement the plumbing between actions like _output_, _input_, and _call_.
For our file fuzzer we will use the link:../Publisher.html[Publisher] called link:../Publisher/File.html[File].
This publisher will allow us to write out a file.

Configuring our publisher is easy, just locate the following XML near the bottom of the +png.xml+ file,
it will be a child of link:../Test.html[Test].

[source,xml]
----
<!-- TODO: Complete publisher -->
<Publisher />
----


Now, this publisher takes a single parameter called _FileName_ that will contain the file name of the fuzzed file.

[source,xml]
----
<Publisher class="File">
	<Param name="FileName" value="fuzzed.png"/>
</Publisher>
----


== Whats Next? ==

We will need to configure a way to detect when our target crashes.
We will also want to collect some information like a stack trace to look at later on.
Head to the next section to learn how to configure an agent and monitor.

''''

link:CreateStateModel.html[<< Previouse] | link:../TutorialDumbFuzzing.html[Up] | link:AgentAndMonitor.html[Next >>]
